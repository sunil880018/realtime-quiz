┌───────────────┐
│ Client connects│
└───────┬───────┘
        │ (with JWT token)
        ▼
┌──────────────────────┐
│ Socket.io middleware │
│ → verify JWT         │
└─────────┬────────────┘
          │ (authenticated)
          ▼
┌───────────────────────────────┐
│ Add player to Redis Queue     │
│ → RPUSH to MATCH_QUEUE_KEY   │
│ → Try matching (tryMatch())  │
└─────────┬────────────────────┘
          │ (if >= 2 players)
          ▼
┌───────────────────────────────┐
│ Matchmaking triggered          │
│ → Pop 2 players from queue    │
│ → Select questions from DB     │
│ → Create Game doc in MongoDB   │
│ → Store initial state in Redis │
└─────────┬────────────────────┘
          │
          ▼
┌───────────────────────────────┐
│ Notify players via Socket.io   │
│ → "game:init" event            │
│ → "question:send" event        │
└─────────┬────────────────────┘
          │
          ▼
┌───────────────────────────────┐
│ Players submit answers         │
│ → "answer:submit" via Socket.io│
│ → Update game state in Redis   │
│ → If all answered, publish     │
│   'game:events' → nextOrFinish │
└─────────┬────────────────────┘
          │
    ┌─────▼─────────┐
    │ All answered? │───No───> Wait
    └─────┬─────────┘
          │Yes
          ▼
┌───────────────────────────────┐
│ Handle next question / finish │
│ → Redis subscriber listens   │
│ → Increment currentIndex      │
│ → If more questions:          │
│     → Emit next question      │
│     → Update Redis state      │
│ → If finished:                │
│     → Persist game to MongoDB │
│     → Emit "game:end" to players│
│     → Delete Redis state      │
└───────────────────────────────┘





How the real-time flow works
1.Client authenticates ( /auth/login ) and receives JWT.
2.Client opens socket connection to ws://server:3000 providing JWT via auth object or
query param: io('http://host:3000', { auth: { token } }) .
3.Client calls POST /game/start with Authorization: Bearer <token> .
4.When two players are queued, server creates a Game, emits game:init to both sockets.

5.Server sends first question with question:send .
6.Clients submit answers via answer:submit socket event.
7.Server validates, updates score. When both players have answered a question, server moves to
the next question or ends the game and emits game:end with results. Game is persisted in
MongoDB.



// .on() = LISTEN for an event.
// .emit() = FIRE/SEND an event.



